#!/usr/bin/env perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../extlib/lib/perl5";
use DBIx::Custom;

my ($old_database_file, $new_database_file) = @ARGV;

# Old DBI
my %old_dbi_args = (
  dsn => "dbi:SQLite:database=$old_database_file",
  connector => 1,
  option => {sqlite_unicode => 1, sqlite_use_immediate_transaction => 1}
);
my $old_dbi = DBIx::Custom->connect(%old_dbi_args);

# New DBI
my %new_dbi_args = (
  dsn => "dbi:SQLite:database=$new_database_file",
  connector => 1,
  option => {sqlite_unicode => 1, sqlite_use_immediate_transaction => 1}
);
my $new_dbi = DBIx::Custom->connect(%new_dbi_args);

# Copy user data
my $old_users = $old_dbi->select(table => 'user')->all;
my $new_user_count = $new_dbi->select('count(*)', table => 'user')->value;
unless ($new_user_count) {
  for my $old_user (@$old_users) {
    
    my @new_user_columns = qw(
      row_id
      id
      email
      admin
      password
      salt
      name
    );
    
    my $new_user = {};
    for my $new_user_column (@new_user_columns) {
      if (exists $old_user->{$new_user_column}) {
        $new_user->{$new_user_column} = $old_user->{$new_user_column};
      }
    }
    
    unless (exists $new_user->{email}) {
      $new_user->{email} = $old_user->{id} . '@gitprep.example';
    }
    
    $new_dbi->insert($new_user, table => 'user');
  }
}

=pod
user
collaboration
project
pull_request
ssh_public_key
=cut
