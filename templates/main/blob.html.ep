<%
  # API
  my $api = Gitprep::API->new($self);
  
  my $user = param('user');
  my $repository = param('repository');
  my $plain = param('plain');

  my $root_ns = $api->root_ns(config->{root});
  
  # Parameters
  my $rep_ns = "$root_ns/$user/$repository.git";
  my $rep = "/$rep_ns";
  my $home_ns = $api->dirname($rep_ns);
  my $home = "/$home_ns";
  my $id_file = param('id_file');

  # Id and file
  my ($id, $file) = $api->parse_id_path($rep, $id_file);

  # Git
  my $git = $self->app->git;
  
  # Commit
  my $commit_log = $git->latest_commit_log($rep, $id, $file);
  
  # Authors
  my $authors = $git->authors($rep, $id, $file);
  
  # Blob content
  my $bid = $git->id_by_path($rep, $id, $file, 'blob')
    or $api->croak('Cannot find file');
  my @cmd = ($git->cmd($rep), 'cat-file', 'blob', $bid);
  open my $fh, '-|', @cmd
    or $api->croak(qq/Couldn't cat "$file", "$bid"/);
  
  # Blob plain
  my $commit;
  my $mimetype;
  my $lines =[];
  if ($plain) {
    # Content type
    my $type = $git->blob_contenttype($fh, $file);

    # Convert text/* content type to text/plain
    if ($self->config('prevent_xss') &&
      ($type =~ m#^text/[a-z]+\b(.*)$# ||
      ($type =~ m#^[a-z]+/[a-z]\+xml\b(.*)$# && -T $fh)))
    {
      my $rest = $1;
      $rest = defined $rest ? $rest : '';
      $type = "text/plain$rest";
    }

    # File name
    my $file_name = $id;
    if (defined $file) { $file_name = $file }
    elsif ($type =~ m/^text\//) { $file_name .= '.txt' }
    
    # Content
    my $content = do { local $/; <$fh> };
    my $sandbox = $self->config('prevent_xss') &&
      $type !~ m#^(?:text/[a-z]+|image/(?:gif|png|jpeg))(?:[ ;]|$)#;
    my $content_disposition = $sandbox ? 'attachment' : 'inline';
    $content_disposition .= "; filename=$file_name";
    
    # Render
    $self->res->headers->content_disposition($content_disposition);
    $self->res->headers->content_type($type);
    $self->render_data($content);
  }
  
  # Blob
  else {
    # MIME type
    $mimetype = $git->blob_mimetype($fh, $file);
    
    # Redirect to blob-plain if no display MIME type
    if ($mimetype !~ m#^(?:text/|image/(?:gif|png|jpeg)$)# && -B $fh) {
      close $fh;
      my $url = $self->url_for('blob_plain',
        project => $rep_ns, id_file => "$id/$file");
      
      return $self->redirect_to($url);
    }
    
    # Commit
    $commit = $git->parse_commit($rep, $id);

    # Parse line
    while (my $line = $git->dec(scalar <$fh>)) {
      chomp $line;
      $line = $git->_tab_to_space($line);
      push @$lines, $line;
    }
  }
  
  # Global variable
  stash(id => $id, repository => $repository);
%>

% layout 'common';
  %= include '/css/common';
  
  %= stylesheet begin
    .blob_header {
      border:1px solid gray;
    }
    .blob_header .top {
      background-color:#E6F1F6;
      padding:10px;
    }
    .blob_header .author_date {
      color: #666;
    }
    .blob_header .bottom {
      padding:5px;
      padding-left:10px;
    }
  % end

  %= include '/include/header';

  <div class="main_panel">
    %= include '/include/sub_header';

    %= include '/include/code_menu';
    %= stylesheet begin
      /* Code menu */
      .code_menu_files {
        border:1px solid #E5E5E5;
        border-bottom:none;
        background-color:white;
        font-weight:bold;
      }
      .code_menu_files a {
        color:#333
      }
    % end

    %= include '/include/page_path', type => 'blob', Path => $file;
    
    <div class="blob_header">
      <div class="top">
        <b><%= $commit_log->{author} %></b>
        <span class="author_date"><%= $commit_log->{author_date} %></span>
        <a href="<%= url_for("/$user/$repository/commit/$id") %>">
          <%= $commit->{title} %>
        </a>
      </div>
      <div class="bottom">
        <%= @$authors %> contributor
      </div>
    </div>
    
    <div class="page_body">
      % if ($mimetype =~ m#^image/#) {
        <img type="<%= $mimetype %>
          % if (defined $file) {
            alt="<%= $file %>" title="<%= $file %>"
          % }
          src="<%= url_for('blob_plain', project => $rep_ns, id_file => "$id/$file") %>"
        />
      % } else {
        % my $nr = 1;
        % for my $line (@$lines) {
          % my $nr4 = sprintf("%4i", $nr);
          <div class="pre"><a id="l<%= $nr %>" href="<%#l<%= $nr %>" class="linenr"><%= $nr4 %></a> <%= $line %></div>
          % $nr++;
        % }
      % }
    </div>
  </div>
  %= include '/include/footer';
