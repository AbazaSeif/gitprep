<%
  # API
  my $api = Gitprep::API->new($self);
  
  my $user = param('user');
  my $repository = param('repository');
  my $plain = param('plain');

  my $root_ns = $api->root_ns(config->{root});
  
  # Parameters
  my $rep_ns = "$root_ns/$user/$repository.git";
  my $rep = "/$rep_ns";
  my $home_ns = $api->dirname($rep_ns);
  my $home = "/$home_ns";
  my $id_file = param('id_file');

  # Id and file
  my ($id, $file) = $api->parse_id_path($rep, $id_file);

  # Git
  my $git = $self->app->git;
  
  # Commit
  my $commit_log = $git->latest_commit_log($rep, $id, $file);
  
  # Authors
  my $authors = $git->authors($rep, $id, $file);
  
  # Blob content
  my $bid = $git->id_by_path($rep, $id, $file, 'blob')
    or $api->croak('Cannot find file');
  my @cmd = ($git->cmd($rep), 'cat-file', 'blob', $bid);
  open my $fh, '-|', @cmd
    or $api->croak(qq/Couldn't cat "$file", "$bid"/);
  
  # Blob size
  my $blob_size = $git->blob_size_kb($rep, $id, $file);
  
  # Blob plain
  my $commit;
  my $mimetype;
  my $lines =[];
  # MIME type
  $mimetype = $git->blob_mimetype($fh, $file);
  
  # Redirect to blob-plain if no display MIME type
  if ($mimetype !~ m#^(?:text/|image/(?:gif|png|jpeg)$)# && -B $fh) {
    close $fh;
    my $url = $self->url_for('blob_plain',
      project => $rep_ns, id_file => "$id/$file");
    
    return $self->redirect_to($url);
  }
  
  # Commit
  $commit = $git->parse_commit($rep, $id);

  # Parse line
  while (my $line = $git->dec(scalar <$fh>)) {
    chomp $line;
    $line = $git->_tab_to_space($line);
    push @$lines, $line;
  }
  
  # Global variable
  stash(id => $id, repository => $repository);
%>

% layout 'common';
  %= include '/css/common';
  
  %= stylesheet begin
  
    /* Header */
    .blob_header {
      border:1px solid gray;
    }
    .blob_header .top {
      background-color:#E6F1F6;
      padding:10px;
    }
    .blob_header .author_date {
      color: #666;
    }
    .blob_header a.comment {
      color:#4183C4;
    }
    .blob_header .bottom {
      padding:5px;
      padding-left:10px;
    }
    
    /* Soruce */
    .source .sheader {
      margin-top:15px;
      padding:7px;
      border:1px gray solid;
      background-color:#F3F3F3;
      overflow:hidden;
    }
    .source .sleft_header {
      padding:3px;
      padding-left:27px;
      background-image:url(<%= url_for('/image/file_min.png') %>);
      background-repeat:no-repeat;
      background-position: 7px center;
      float:left;
    }
    .source .sright_header {
      float:right;
    }
    .source .sright_header a {
      color:#555;
      font-weight:bold;
      display:block;
      float:left;
      border:1px solid gray;
      padding:4px;
      margin:0;
    }
    .source .sright_header a:hover {
      color:white;
      background-color:#4183C4;
    }
    .source a.sraw {
      border-right:none;
      border-top-left-radius:2px;
      border-bottom-left-radius:2px;
    }
    .source a.sblame {
      border-right:none;
    }
    .source a.shistory {
      border-top-right-radius:2px;
      border-bottom-right-radius:2px;
    }
    .source .sbody {
      padding: 10px;
      padding-left:0;
      font-family: monospace;
      border:1px gray solid;
      border-top:none;
    }
    .source .sline {
      font-family: monospace;
      font-size: 12px;
      white-space: pre;
      margin:3px;
    }
    .source .snumber {
      color:gray;
    }
  % end 

  %= include '/include/header';

  <div class="main_panel">
    %= include '/include/sub_header';

    %= include '/include/code_menu';
    %= stylesheet begin
      /* Code menu */
      .code_menu_files {
        border:1px solid #E5E5E5;
        border-bottom:none;
        background-color:white;
        font-weight:bold;
      }
      .code_menu_files a {
        color:#333
      }
    % end

    %= include '/include/page_path', type => 'blob', Path => $file;
        
    <div class="blob_header">
      <div class="top">
        <b><%= $commit_log->{author} %></b>
        <span class="author_date"><%= $commit_log->{author_date} %></span>
        <a class="comment" href="<%= url_for("/$user/$repository/commit/$id") %>">
          <%= $commit->{title} %>
        </a>
      </div>
      <div class="bottom">
        <%= @$authors %> contributor
      </div>
    </div>

    <div class="source">
      <div class="sheader">
        <div class="sleft_header">
          file <span style="color:gray">|</span> <%= @$lines %> lines <span style="color:gray">|</span> <%= $blob_size %>kb
        </div>
        <div class="sright_header">
          <a class="sraw" href="<%= url_for("/$user/$repository/raw/$id/$file") %>">Raw</a>
          <!-- TODO: <a class="sblame" href="<%= url_for("/$user/$repository/blame/$id/$file") %>">Blame</a> -->
          <a class="shistory" href="<%= url_for("/$user/$repository/commits/$id/$file") %>">History</a>
        </div>
      </div>
      <div class="sbody">
        % if ($mimetype =~ m#^image/#) {
          <img type="<%= $mimetype %>
            % if (defined $file) {
              alt="<%= $file %>" title="<%= $file %>"
            % }
            src="<%= url_for('blob_plain', project => $rep_ns, id_file => "$id/$file") %>"
          />
        % } else {
          % my $nr = 1;
          % for my $line (@$lines) {
            % my $nr5 = sprintf("%5i", $nr);
            <div class="sline"><a class="snumber" href="#<%= $nr %>"><%= $nr5 %></a> <%= $line %></div>
            % $nr++;
          % }
        % }
      </div>
    </div>
  </div>
  %= include '/include/footer';
