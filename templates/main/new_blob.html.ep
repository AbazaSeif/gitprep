<%
  # API
  my $api = Gitprep::API->new($self);
  
  my $user = param('user');
  my $repository = param('repository');
  my $plain = param('plain');

  my $root_ns = $api->root_ns(config->{root});
  
  # Parameters
  my $project_ns = "$root_ns/$user/$repository.git";
  my $project = "/$project_ns";
  my $home_ns = $api->dirname($project_ns);
  my $home = "/$home_ns";
  my $id_file = param('id_file');

  # Id and file
  my ($id, $file) = $api->parse_id_path($project, $id_file);

  # Git
  my $git = $self->app->git;

  # Blob content
  my $bid = $git->id_by_path($project, $id, $file, 'blob')
    or $api->croak('Cannot find file');
  my @cmd = ($git->cmd($project), 'cat-file', 'blob', $bid);
  open my $fh, '-|', @cmd
    or $api->croak(qq/Couldn't cat "$file", "$bid"/);
  
  # Blob plain
  my $commit;
  my $mimetype;
  my $lines =[];
  if ($plain) {
    # Content type
    my $type = $git->blob_contenttype($fh, $file);

    # Convert text/* content type to text/plain
    if ($self->config('prevent_xss') &&
      ($type =~ m#^text/[a-z]+\b(.*)$# ||
      ($type =~ m#^[a-z]+/[a-z]\+xml\b(.*)$# && -T $fh)))
    {
      my $rest = $1;
      $rest = defined $rest ? $rest : '';
      $type = "text/plain$rest";
    }

    # File name
    my $file_name = $id;
    if (defined $file) { $file_name = $file }
    elsif ($type =~ m/^text\//) { $file_name .= '.txt' }
    
    # Content
    my $content = do { local $/; <$fh> };
    my $sandbox = $self->config('prevent_xss') &&
      $type !~ m#^(?:text/[a-z]+|image/(?:gif|png|jpeg))(?:[ ;]|$)#;
    my $content_disposition = $sandbox ? 'attachment' : 'inline';
    $content_disposition .= "; filename=$file_name";
    
    # Render
    $self->res->headers->content_disposition($content_disposition);
    $self->res->headers->content_type($type);
    $self->render_data($content);
  }
  
  # Blob
  else {
    # MIME type
    $mimetype = $git->blob_mimetype($fh, $file);
    
    # Redirect to blob-plain if no display MIME type
    if ($mimetype !~ m#^(?:text/|image/(?:gif|png|jpeg)$)# && -B $fh) {
      close $fh;
      my $url = $self->url_for('blob_plain',
        project => $project_ns, id_file => "$id/$file");
      
      return $self->redirect_to($url);
    }
    
    # Commit
    $commit = $git->parse_commit($project, $id);

    # Parse line
    while (my $line = $git->dec(scalar <$fh>)) {
      chomp $line;
      $line = $git->_tab_to_space($line);
      push @$lines, $line;
    }
  }
%>

% layout 'common';
  %= include '/include/header', title => 'Blob', project => $project;
  %= include '/include/current_directory', home_ns => $home_ns, home => $home;

  <div class="page_nav">
    <a href="<%= url_for('blob_plain', project => $project_ns, id_file => "$id/$file") %>">
      Raw
    </a>
    |
    % my $head_id = gitprep_get_head_id($project);
    <a href="<%= url_for('blob', project => $project_ns, id_file => "HEAD/$file") %>">
      HEAD
    </a>
    <br/>
  </div>
  <div class="header">
  <a class="title" href= "<%= url_for('commit', project => $project_ns, id => $id) %>">
    <%= $commit->{title} %>
  </a>
  </div>

  %= include '/include/page_path', project => $project, project_ns => $project_ns, id => $id, Path => $file, type => 'blob';

  <div class="page_body">
    % if ($mimetype =~ m#^image/#) {
      <img type="<%= $mimetype %>
        % if (defined $file) {
          alt="<%= $file %>" title="<%= $file %>"
        % }
        src="<%= url_for('blob_plain', project => $project_ns, id_file => "$id/$file") %>"
      />
    % } else {
      % my $nr = 1;
      % for my $line (@$lines) {
        % my $nr4 = sprintf("%4i", $nr);
        <div class="pre"><a id="l<%= $nr %>" href="<%#l<%= $nr %>" class="linenr"><%= $nr4 %></a> <%= $line %></div>
        % $nr++;
      % }
    % }
  </div>
