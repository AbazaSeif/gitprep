<%
  use Gitprep::API;

  # API
  my $api = Gitprep::API->new($self);
  
  # Parameters
  my $user = param('user');
  my $project = param('project');
  my $object ||= param('object') || 'master';
  my $root_ns = $api->root_ns(config->{root});
  my $rep_ns = "$root_ns/$user/$project.git";
  my $rep = "/$rep_ns";

  # Git
  my $git = app->git;

  # Id and directory
  my ($rev, $dir) = $git->parse_object($rep, $object);
  
  # Tree id
  my $commit = $git->parse_commit($rep, $rev);
  my $tid;
  my $top;
  if (defined $dir && $dir ne '') {
    $tid = $git->id_by_path($rep, $rev, $dir, 'tree');
  }
  else {
    $top = 1;
    $tid = $commit->{tree};
  }
  $self->render_not_found unless defined $tid;
  
  # Commit log
  my $latest_commit_log = $git->latest_commit_log($rep, $rev);

  # Tree
  my $trees = $git->trees($rep, $tid, $rev, $dir);
  
  # Repository description
  my $desc = $git->project_description($rep);
  
  # Commits number
  my $commits_number = $git->commits_number($rep, $rev);
  
  # README
  my $readme = $git->blob_plain($rep, $rev, 'README');
  
  # Variable for included templates
  stash(
    rev => $rev,
    commit => $commit,
    latest_commit_log => $latest_commit_log,
    trees => $trees,
    dir => $dir,
    title => "$project/$dir at $rev - $user/$project"
  );
%>

% layout 'common';
  %= include '/css/common';
  
  %= javascript begin 
    $(document).ready(function() {
      
      // Repository URL
      var rep_url_bak_color = "#F5F5F5";
      var http_rep_url = "<%= url_for("/$user/$project.git")->to_abs %>";
      var ssh_rep_url
        = "<%= url_for("/$rep_ns")->to_abs->scheme('ssh')->userinfo($user)->port(config->{ssh_port}) %>";
      var git_rep_url = "<%= url_for("/$user/$project.git")->to_abs->scheme('git')->port('') %>";
      $(".git_url_text").val(http_rep_url);
      $(".git_url_http").css("background-color", "darkgray");
      $(".git_url_http").on('click', function () {
        $(".git_url_http").css("background-color", "darkgray");
        $(".git_url_ssh").css("background-color", rep_url_bak_color);
        $(".git_url_git").css("background-color", rep_url_bak_color);
        
        $(".git_url_text").val(http_rep_url);
        $(".git_url_access").text("Read-only access");
      });
      $(".git_url_ssh").on('click', function () {
        $(".git_url_http").css("background-color", rep_url_bak_color);
        $(".git_url_ssh").css("background-color", "darkgray");
        $(".git_url_git").css("background-color", rep_url_bak_color);
        
        $(".git_url_text").val(ssh_rep_url);
        $(".git_url_access").text("Read-Write access");
      });
      $(".git_url_git").on('click', function () {
        $(".git_url_http").css("background-color", rep_url_bak_color);
        $(".git_url_ssh").css("background-color", rep_url_bak_color);
        $(".git_url_git").css("background-color", "darkgray");
        
        $(".git_url_text").val(git_rep_url);
        $(".git_url_access").text("Read-Only access");
      });
      
    });
  % end
  
  %= stylesheet begin
    
    /* Repository description */
    .description {
      padding:10px;
      border:1px solid gray;
      margin-top:-1px;
    }
    
    /* Git URL */
    .git_url {
      border: 1px solid gray;
      padding: 10px;
      margin-top:-1px;
      font-size:80%;
    }
    .git_url_zip {
      padding:5px;
      float:left;
      border:1px solid gray;
      margin-right:5px;
      background-color:#F5F5F5;
    }
    .git_url_http {
      padding:5px;
      float:left;
      border:1px solid gray;
      background-color:#F5F5F5;
    }
    .git_url_ssh {
      padding:5px;
      float:left;
      border:1px solid gray;
      border-left:none;
      background-color:#F5F5F5;
    }
    .git_url_git {
      padding:5px;
      float:left;
      border:1px solid gray;
      border-left:none;
      background-color:#F5F5F5;
    }
    .git_url_text {
      padding:3px;
      float:left;
      border:1px solid gray;
      width:300px;
      margin-right:10px;
      border-left:none;
      display:block;
    }
    .git_url_access {
      padding:5px;
    }
    
    /* Commit number */
    .commit_number {
      font-size:120%;
    }
    .commit_number_left {
      width:700px;
      float:left;
    }
    .commit_number_right {
      text-align:right;
    }
    
    /* README */
    .readme {
      width:100%;
      margin: 5px auto;
      border:2px solid gray;
      margin-top:30px;
      line-height:1.5em;
    }
    .readme_title {
      border-bottom:1px solid gray;
      font-size:130%;
      font-weight:bold;
      padding:10px;
    }
    .readme_body {
      min-height: 50px;
      font-size:120%;
      padding:30px;
    }
  % end

  %= include '/include/header';

  <div class="main_panel">
    %= include '/include/sub_header';

    <div class="description"><%= $desc %></div>
    
    <div class="git_url">
      <div class="git_url_zip"><a href="<%= url_for('/archive/master.zip') %>"><s>ZIP</s></a></div>
      <div class="git_url_http">HTTP</div>
      <div class="git_url_ssh">SSH</div>
      <div class="git_url_git">Git Read-Only</div>
      <input type="text" class="git_url_text">
      <div class="git_url_access">Read-only access</div>
    </div>
    
    %= include '/include/code_menu';
    %= stylesheet begin
      /* Code menu */
      .code_menu_files {
        border:1px solid #E5E5E5;
        border-bottom:none;
        background-color:white;
        font-weight:bold;
      }
      .code_menu_files a {
        color:#333
      }
    % end
        
    %= include '/include/page_path', type => 'tree', Path => $dir;

    %= include '/include/tree';
    
    % if ($top) {
      <div class="readme">
        <div class="readme_title">README</div>
        <div class="readme_body"><pre><%= $readme %></pre></div>
      </div>
    % }
  </div>
  
  %= include '/include/footer';

