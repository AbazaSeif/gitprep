<%
  my $state;

  # API
  my $api = gitprep_api;
  
  # Default revision
  my $rev = 'master';
  
  # Parameters
  my $user = param('user');
  my $project = param('project');
  my $object ||= param('object') || 'master/';

  # Git
  my $git = app->git;

  # Repository description
  my $desc = $git->description($user, $project);
  
  # Check exsitence
  my $commits_number;
  my $readme;
  if ($git->branch_exists($user, $project)) {
    # Id and directory
    my ($id, $dir) = @{$git->parse_object($user, $project, $object)};
    
    # Tree id
    my $tid;
    my $commit = $git->parse_commit($user, $project, $id);
    if (defined $dir && $dir ne '') {
      $tid = $git->id_by_path($user, $project, $id, $dir, 'tree');
    }
    else { $tid = $commit->{tree} }
    $self->render_not_found unless defined $tid;

    # Commit log
    my $latest_commit_log = $git->latest_commit_log($user, $project, $rev);
    
    # Tree
    my $trees = $git->trees($user, $project, $tid, $rev);
    
    # Commits number
    $commits_number = $git->commits_number($user, $project, $rev);
    
    # README
    eval { $readme = $git->blob_plain($user, $project, $rev, 'README') };
    $readme = '' if $@;
    
    # Variable for included template
    stash(
      commit => $commit,
      latest_commit_log => $latest_commit_log,
      trees => $trees,
      dir => $dir,
      rev => $rev,
      title => "$user/$project"
    );
    
    $state = 'display';
  }
  else { $state = 'init' }

  my $url = url_for->to_abs;
  $url->base(undef);
  my $ssh_port = config->{basic}{ssh_port};
  my $rep_home = app->git->rep_home;
  my $execute_user = getpwuid($>);
  my $ssh_rep_url = "ssh://$execute_user\@" . $url->host
    . ($ssh_port ? ":$ssh_port" : '') . "$rep_home/$user/$project.git";
%>

% layout 'common';

  % my $logined = $api->logined;

  %= javascript begin
    $(document).ready(function () {
      var http_rep_url = '<%= url_for("$user/$project.git")->to_abs %>';
      % my $rep = $git->rep($user, $project);
      % my $ssh_port = config->{basic}{ssh_port} || '';
      
      var logined = <%= $logined ? 'true' : 'false' %>;
      var ssh_rep_url = '';
      if (logined) {
        ssh_rep_url = '<%= $ssh_rep_url %>';
      }
      
      // Click HTTP button
      $('#btn_http').on('click', function () {
        $('#rep_url').val(http_rep_url);
        $('#access').text('Read-only');
      });
      
      // Click SSH button
      $('#btn_ssh').on('click', function () {
        $('#rep_url').val(ssh_rep_url);
        $('#access').text('Read-write');
      });

      // Initialize
      if (logined) {
        $('#btn_ssh').trigger('click');
      }
      else {
        $('#btn_http').trigger('click');
      }
    });
  % end
  
  %= include '/include/header';
  
  <div class="container">
    % if (my $original_project = flash('original_project')) {
      <div class="alert alert-success">
        <button type="button" class="close" data-dismiss="alert">&times;</button>
        Repository is forked from <%= $original_project %>.
      </div>
    % }
    
    %= include '/include/project_header';

    <div class="row">
      <div class="span10">
        <h4 style="margin-top:5px">
          <%= $desc %>
        </h4>
      </div>
      <div class="span2 text-right">
        % if ($logined && $user eq session('user')) {
          <a class="btn" href="<%= url_for("/$user/$project/settings") %>">Settings</a>
        % }
      </div>
    </div>
    % if ($state eq 'display') {
      <div class="border-gray" style="padding:0 5px;margin-bottom:10px">
        <a class="btn" href="<%= url_for("/$user/$project/archive/master.zip") %>">
          <i class="icon-arrow-down"></i>ZIP
        </a>
        <div class="input-append" style="margin-top:10px">
          <div class="btn-group" data-toggle="buttons-radio">
            <button class="btn" id="btn_http" style="border-radius:0">HTTP</button>
            % if ($logined) {
              <button class="btn" id="btn_ssh" style="border-radius:0">SSH</button>
            % }
          </div>
          <input class="span8" id="rep_url" type="text" style="border-radius:0;">
        </div>
        <b><span id="access"></span></b> access
      </div>
      
      %= include '/include/code_menu', display => 'files';
      
      <div class="row">
        <div class="span6">
          <a href="<%= url_for %>"><%= $project %></a>
        </div>
        <div class="span6 text-right">
          <a href="<%= url_for("/$user/$project/commits/master") %>">
            <%= $commits_number %> commits
          </a>
        </div>
      </div>
      
      %= include '/include/tree';
      
      <div>
        <h3>README</h3>
        <pre><%= $readme %></pre>
      </div>
    % } elsif ($state eq 'init' && $logined) {
    
      <div class="text-center" style="margin-bottom:10px">
        <b>Create a new repository on the command line</b>
      </div>
      
      <pre style="margin-bottom:30px">
touch README
git init
git add README
git commit -m "first commit"
git remote add origin <%= $ssh_rep_url %>
git push -u origin master</pre>
      
      <div class="text-center" style="margin-bottom:10px">
        <b>Push an existing repository from the command line</b>
      </div>
      
      <pre style="margin-bottom:30px">
git remote add origin <%= $ssh_rep_url %>
git push -u origin master</pre>
    % } else {
      <div class="well text-center muted" style="margin-bottom:30px">
        <b>Repositry is not yet created.</b>
      </div>
    % }
  </div>
  
  %= include '/include/footer';
